"""
This script is designed to process depth maps for use in the EndoNeRF tool. It performs two main operations:
1. Applying tool masks to the depth maps.
2. Inverting the values of depth maps generated by TinyHitNet.

The script follows these steps:
1. Inverts the grayscale values of the depth maps present in the specified input directory.
2. Applies masks to the depth maps from the specified mask directory.

Attributes:
    input_dir (str): The directory path where the unprocessed depth maps are stored.
    mask_dir (str): The directory path where the mask files are located.
    output_dir (str): The directory path where the preprocessed depth maps will be saved.

Functions:
    invert_grayscale_image(path_to_image: str) -> None:
        Inverts the grayscale values of the image specified by the path.

Usage:
    The script is executed directly and processes depth maps based on the hardcoded range of image numbers.
    It iterates over the image numbers twice, first to invert the grayscale values and then to apply the masks.

Note:
    The range of image numbers is hardcoded in the script and needs to be adjusted based on the dataset being used.
    Currently, it is set to 156 for the 'cutting_tissues_twice' dataset and needs to be changed to 63 for the 'pulling_soft_tissues' dataset.
"""

import os
import numpy
import cv2
from PIL import Image

# Set the input directory path where the depthmaps were saved
input_dir = "/dhc/home/ennio.strohauer/endonerf_sample_datasets/HITNet_depth_unprocessed/cutting_tissues_twice_HITNet_m1"

#  Set the directory path where the mask is located
mask_dir = "/dhc/home/ennio.strohauer/endonerf_sample_datasets/cutting_tissues_twice_HITNet_m1(plain)/masks"

# Set the output directory for preprocessed depthmaps
output_dir = "/dhc/home/ennio.strohauer/endonerf_sample_datasets/cutting_tissues_twice_HITNet_m1(plain)/depth"


# depthmaps generated by TinyHitnet are inverted compared to the ones they are replacing
def invert_grayscale_image(path_to_image):
    original_grayscale_image = cv2.imread(path_to_image, cv2.IMREAD_GRAYSCALE)

    if original_grayscale_image is None:
        print(f"Failed to read image: {path_to_image}")
        return

    inverted_grayscale_array = 255 - numpy.array(original_grayscale_image)
    # corrected_inverted_grayscale_array = numpy.clip(
    #     inverted_grayscale_array - 100, 0, 255)
    cv2.imwrite(path_to_image, inverted_grayscale_array)


# Iterate over the HARDCODED range of image numbers
# 156 for cutting_tissues_twice
# 63 for pulling_soft_tissues

for image_num in range(156):
    # Generate the input image file path
    depthmap_path = os.path.join(input_dir, f"frame-{image_num:06d}.depth.png")

    invert_grayscale_image(depthmap_path)
    print(f"sucessfully inverted frame-{image_num:06d}.depth.png")

for image_num in range(156):
    # Generate the input image file path
    depthmap_path = os.path.join(input_dir, f"frame-{image_num:06d}.depth.png")
    mask_path = os.path.join(mask_dir, f"frame-{image_num:06d}.mask.png")

    depthmap = cv2.imread(depthmap_path, cv2.IMREAD_GRAYSCALE)
    mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
    masked_image = numpy.where(mask < 1, depthmap, 0)
    print(f"sucessfully applied mask to frame-{image_num:06d}.depth.png")

    # Generate the output image file path
    output_path = os.path.join(output_dir, f"frame-{image_num:06d}.depth.png")
    cv2.imwrite(output_path, masked_image)

    print("Result saved successfully at", output_path)
